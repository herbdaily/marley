Marley
----

Marley is a project consisting of several parts:

	* A Sinatra-like micro-framework for returning data from model-like entities (Ruby, based on thin/rack)
	* A framework for adding reusable content to the framework ("Joints")
	* A data format ("Reggae") and javascript templating language (a la Joe Hewitt: http://twitter.com/#!/joehewitt/status/108341258602299395) for doing HTML-free UIs (well sort of, you know what I mean)
	* A simple client ("Jamaica") that is powerful enough to implement a simple forums app (javascript and css)

----
----

More about each part:

Marley
----

The basics:  Marley makes lots of assumptions, all of which should be override-able.

* Marley looks for resources (as indicated by the first part of the URL) in the Marley::Resources namespace as constants
	* A resource must respond either to a "controller" method or to one or more REST verbs. 
	* Resources implementing a "controller" method should return an object that responds to one or more REST verbs from that method
	* REST verb methods should return a string to be sent to the client

* Marley provides 2 plugins for the Sequel ORM.
	* RestConvenience - Adds a default controller for standard rest routes to a model
	* RestAuthorization - Adds default authorization to a model

Joints
----

"Joints" are pre-packaged resource sets that can be included in a Marley application.  Unfortunately, for now, their behavior can only be changed by monkey patching. 

Reggae
----

The server and client use a JSON based data representation I developed for this project and tentatively named "Reggae."  I need to nail it down and document it, but basically it's a recursive list of lists, each of which has the format ["name",{properties},[contents]].

Jamaica
----

The default Marley client is "Jamaica", which consists of JS/CSS for browsers.  It sucks right now and I'm hoping somebody takes it over as a sub-project, but it does work - at least on FF.


----
----